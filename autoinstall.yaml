#cloud-config
autoinstall:
  version: 1
  locale: en_CA.UTF-8
  keyboard:
    layout: us
  timezone: America/Toronto

  identity:
    hostname: m143
    username: hkh
    # password = 'ubuntu' (SHA-512). Replace if desired (openssl passwd -6 'newpass')
    password: "$6$KQeZ1gV4$9F2lY7yq1Fm/8QKiTtN6h2Q3iN6o4G5tK8vZ2fD2q5r6.PmN8.5lXjH4P7U0r0kQx5yJ1S0d0M0C6yXo3y4p1/"

  network:
    network:
      version: 2
      ethernets:
        all:
          match: { name: "*" }
          dhcp4: true
          dhcp6: true
          optional: true

  apt:
    geoip: true
    primary:
      - arches: [amd64]
        uri: http://ca.archive.ubuntu.com/ubuntu

  # Install core packages at install time (faster first boot)
  packages:
    - git
    - dkms
    - build-essential
    - zstd
    - curl
    - wget
    - linux-source
    - linux-headers-generic
    - software-properties-common
    - linux-firmware
    - openssh-server

  drivers:
    install: true

  ssh:
    install-server: true

  # ----- STORAGE (preserve ESP + macOS + swap, reformat p4 to Btrfs for /) -----
  storage:
    version: 1
    config:
      - id: disk-nvme
        type: disk
        path: /dev/nvme0n1
        ptable: gpt
        preserve: true
        wipe: false

      # p1: ESP (keep & mount at /boot/efi)
      - id: esp-part
        type: partition
        device: disk-nvme
        number: 1
        preserve: true
        grub_device: true
      - id: esp-fs
        type: format
        volume: esp-part
        fstype: fat32
        preserve: true
      - id: esp-mount
        type: mount
        device: esp-fs
        path: /boot/efi

      # p2: macOS APFS (preserve, do not touch)
      - id: macos-part
        type: partition
        device: disk-nvme
        number: 2
        preserve: true

      # p3: swap (keep)
      - id: swap-part
        type: partition
        device: disk-nvme
        number: 3
        preserve: true
      - id: swap-fs
        type: format
        volume: swap-part
        fstype: swap
        preserve: true
      - id: swap-mount
        type: mount
        device: swap-fs
        path: none

      # p4: root (reformat to Btrfs and mount at /)
      - id: root-part
        type: partition
        device: disk-nvme
        number: 4
        preserve: true
      - id: root-fs
        type: format
        volume: root-part
        fstype: btrfs
        label: ubuntu-root
      - id: root-mount
        type: mount
        device: root-fs
        path: /

  # Fully automated (no interactive sections)
  interactive-sections: []

  # ----- FIRST-BOOT: post-install script (DKMS, Apple Wi-Fi board file, optional mainline) -----
  user-data:
    package_update: true
    package_upgrade: false

    write_files:
      - path: /usr/local/sbin/mbp14_3_postinstall.sh
        permissions: "0755"
        owner: root:root
        content: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Set to "" (empty) to SKIP installing a mainline kernel.
          # Set to something like v6.16 to install that mainline version.
          MAINLINE_VERSION="${MAINLINE_VERSION:-}"
          CREATE_BACKUP="${CREATE_BACKUP:-yes}"

          log(){ printf "\n[+ ] %s\n" "$*"; }
          warn(){ printf "\n[!] %s\n" "$*"; }

          # Find first human user (uid >= 1000)
          TARGET_USER="$(awk -F: '$3>=1000 && $3<60000 {print $1; exit}' /etc/passwd || true)"
          TARGET_USER="${TARGET_USER:-$SUDO_USER}"
          TARGET_HOME="$(getent passwd "$TARGET_USER" | cut -d: -f6 || echo /home/${TARGET_USER:-hkh})"

          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl wget git dkms build-essential zstd linux-source "linux-headers-$(uname -r)" || true

          # --- Optional: install a specific mainline kernel (robust skip) ---
          ML_RAW="${MAINLINE_VERSION:-}"
          ML_TRIM="$(printf '%s' "$ML_RAW" | tr -d '[:space:]')"
          ML_LC="$(printf '%s' "$ML_TRIM" | tr '[:upper:]' '[:lower:]')"
          INSTALL_MAINLINE=1
          case "$ML_LC" in
            ""|"skip"|"none"|"ga"|"off"|"false"|"0") INSTALL_MAINLINE=0 ;;
          esac
          if [ "$INSTALL_MAINLINE" -eq 1 ]; then
            log "Installing mainline kernel: ${ML_TRIM}"
            apt-get install -y software-properties-common || true
            add-apt-repository -y ppa:cappelikan/ppa || true
            apt-get update -y || true
            apt-get install -y mainline || true
            mainline install --yes --force --version "${ML_TRIM}" || warn "mainline install failed; continuing with current kernel"
            apt-get -y install "linux-headers-$(uname -r)" || true
          else
            log "Skipping mainline kernel install (MAINLINE_VERSION='${ML_RAW}')"
          fi

          # --- Wi-Fi: Apple BCM43602 board/NVRAM file ---
          log "Wi-Fi: Apple MBP14,3 BCM43602 calibration"
          apt-get install -y --reinstall linux-firmware
          install -d -m 0755 /lib/firmware/brcm
          cd /lib/firmware/brcm
          APPLETXT="brcmfmac43602-pcie.Apple Inc.-MacBookPro14,3.txt"
          if ! [ -s "${APPLETXT}" ]; then
            wget -qO "${APPLETXT}" "https://bugzilla.kernel.org/attachment.cgi?id=290569"
          fi
          ln -sfn "${APPLETXT}" brcmfmac43602-pcie.txt
          chmod 0644 "${APPLETXT}" brcmfmac43602-pcie.txt || true
          systemctl stop NetworkManager || true
          ip link set wlp3s0 down 2>/dev/null || true
          modprobe -r brcmfmac brcmutil cfg80211 2>/dev/null || true
          modprobe brcmfmac 2>/dev/null || true
          systemctl start NetworkManager || true

          # --- Audio: CS8409 DKMS + force legacy HDA ---
          log "Audio: CS8409 DKMS + legacy HDA"
          tee /etc/modprobe.d/99-intel-dsp.conf >/dev/null <<EOF
          options snd-intel-dspcfg dsp_driver=1
          EOF
          tee /etc/modprobe.d/10-disable-sof-avs.conf >/dev/null <<EOF
          blacklist snd_soc_avs
          blacklist snd_soc_hda_codec
          blacklist snd_sof_pci_intel_skl
          blacklist snd_sof_intel_hda_common
          blacklist snd_sof_pci
          blacklist snd_sof
          EOF
          tee /etc/modprobe.d/99-hda.conf >/dev/null <<EOF
          options snd_hda_intel enable_msi=1 power_save=0 dmic_detect=0 position_fix=1
          EOF

          WORKDIR="${TARGET_HOME}/.mbp-setup"
          install -d -m 0755 "${WORKDIR}"
          cd "${WORKDIR}"
          rm -rf snd_hda_macbookpro
          git clone https://github.com/davidjo/snd_hda_macbookpro
          cd snd_hda_macbookpro
          bash ./install.cirrus.driver.sh || warn "CS8409 build returned non-zero; retry after reboot if headers changed"
          usermod -aG audio,video,render "${TARGET_USER}" || true

          # --- Touch Bar (2016/2017 non-T2): applespi + apple_ib_tb DKMS + USB nudge ---
          log "Touch Bar: applespi/apple_ib_tb DKMS + nudge"
          cd "${WORKDIR}"
          rm -rf macbook12-spi-driver
          git clone https://github.com/almas/macbook12-spi-driver
          cd macbook12-spi-driver
          git checkout touchbar-driver-hid-driver || true
          ln -sfn "$(pwd)" /usr/src/applespi-0.1
          dkms remove applespi/0.1 --all 2>/dev/null || true
          dkms install applespi/0.1 --force || warn "DKMS applespi failed; will retry after reboot"

          # Preload modules
          grep -q "^applespi$" /etc/initramfs-tools/modules 2>/dev/null || cat >>/etc/initramfs-tools/modules <<EOM

          # Touchpad/keyboard + Touch Bar for 2016/2017 MBP
          applespi
          apple_ib_tb
          intel_lpss_pci
          spi_pxa2xx_platform
          EOM

          tee /etc/modprobe.d/apple_ib_tb.conf >/dev/null <<EOF
          options apple_ib_tb fnmode=2 idle_timeout=60
          EOF

          # USB nudge to light the bar if needed
          install -m0755 /dev/stdin /usr/local/sbin/mbp-touchbar-nudge.sh <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          for d in /sys/bus/usb/devices/*; do
            if [ -f "$d/manufacturer" ] && grep -qi "apple" "$d/manufacturer"; then
              b="$(basename "$d")"
              echo "$b" > /sys/bus/usb/drivers/usb/unbind 2>/dev/null || true
              echo "$b" > /sys/bus/usb/drivers/usb/bind   2>/dev/null || true
            fi
          done
          EOS

          install -m0644 /dev/stdin /etc/systemd/system/mbp-touchbar-nudge.service <<'EOF'
          [Unit]
          Description=MacBookPro14,x Touch Bar USB nudge
          After=multi-user.target
          [Service]
          Type=oneshot
          ExecStart=/usr/local/sbin/mbp-touchbar-nudge.sh
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl enable mbp-touchbar-nudge.service || true

          log "Update initramfs"
          update-initramfs -u

          if [ "${CREATE_BACKUP}" = "yes" ]; then
            log "Creating compressed rootfs backup (zstd -19)â€¦"
            BACKUP="${TARGET_HOME}/ubuntu-root-$(date +%F).tar.zst"
            tar --xattrs --acls --numeric-owner --one-file-system                 -I "zstd -T0 -19"                 -cpf "$BACKUP"                 --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found","/swapfile"}                 /
            chown "${TARGET_USER}:${TARGET_USER}" "$BACKUP" || true
            log "Backup saved to $BACKUP"
          fi

    runcmd:
      # To SKIP mainline: MAINLINE_VERSION=""
      # To install a specific mainline: set MAINLINE_VERSION=v6.16 (for example)
      - [ bash, -lc, 'MAINLINE_VERSION="" CREATE_BACKUP=yes /usr/local/sbin/mbp14_3_postinstall.sh' ]
